Release Notes
-------------

[Version 5.0 - ??]

[Version 4.0 - 11/10/2018]
* Complete revamp of RESTful APIs (see: https://github.com/Luzzu/Framework/wiki/Restful-APIs);
* Better error handling and display of error handling;
* Added functionality for computing historical datasets;
* Improved Problem Report generation with the introduction of three new classes: ProblemCollectionModel, ProblemCollectionQuad, and ProblemCollectionResource in the luzzu-annotation module.
* Removed the getQualityReport() method in the QualityMetric interface and replaced it with ProblemCollection<?> getProblemCollection();
* Output of metrics can be any Java primitive type;
* Removed SPARK processor and put it in the pipeline for re-implementing using the SANSA framework;
* Added HDT processor;
* Improve provenance information for each assessed metrics;
* Added profiling information for each assess metric;
* Added a package with algorithms that can be used for metric implementation:
	* io.github.luzzu.qualitymetrics.algorithms.ReservoirSampler
	* io.github.luzzu.qualitymetrics.algorithms.RLBSBloomFilter
* Added a package with data types and common algorithms that can be used within metrics (e.g. Caching, Dereferencability, Serialisability);
* Further improvements in the Luzzu Quality Metric Language;
* New experimental Luzzu Web Application.

[Version 2.0 - 16/10/2016]
* Added JenaCacheObject interface to enable disk caching of Jena Objects in libraries such as MapDB. This fixed the problem of Luzzu 
failing with large problem reports. 
* QualityReport now is being stored on disk instead of memory using TDB.
* Improved ranking algorithm.
* Cache object can be cleared.
* Added in-Memory IO processor.
* Added large stream processor which parses gzips from command line.
* Automatic creation of quality metadata folder if not existing.
* Created Processor Controller which intelligently chooses the right processor according the the file size (if available).
* Improved SPARQL processor to cater scrollable cursors in endpoints
* Improved Web API to handle assessment statistics
* Assessment is now run as background process, compute_quality returns an ID of the assessment.
* Fixed Web App queries
* Added two methods to the Quality Metric Assessment Interface for the dataset URI field
* Working version of the Luzzu Quality Metric Language

[Version 1.2.1 - 06/12/2015]
* Added vocabularies which were missed in last release

[Version 1.2 - 05/12/2015]
* Added SPARQL Endpoint processor
* Added the method processorWorkFlow in the IOProcessor Interface
* Implemented Luzzu Web and together with its API in the communication layer
* Fixed Bug related to the creation of folders


[Version 1.1 - 13/05/2015]
* Updated README.md
* Changed Distribution Platform - Dependencies can be found on Maven Central Repository
* Can represent a defined model as a problem report not just Quads and Resources
* Load dependencies from external POM files for external metrics - instead of compiling external metrics jars with dependencies thus avoid having 
big external metrics jar files.
* Representation of provenance and estimation information for metric observations

[Version 1.0 - 01/12/2014]
* First official version
* Fixed InternalConfigModel.java null exception when "externals/vocabs" folder is not found
* Added luzzu-operations automatic unbiased ranking algorithm
* Added luzzu-operations graph signing using MD5
* Fixed hanging thread in Stream Processor
* Added first version of a Spark Stream Processor
* Persistence of Cache on disk
* User Driven Ranking
* Added functionality in stream processor to allow multiple dumps in the same dataset to be assessed 
