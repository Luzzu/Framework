/* Generated By:JavaCC: Do not edit this line. LQMLParserConstants.java */
package io.github.luzzu.qml.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LQMLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DEF = 6;
  /** RegularExpression Id. */
  int LABEL = 7;
  /** RegularExpression Id. */
  int DESC = 8;
  /** RegularExpression Id. */
  int MATCH = 9;
  /** RegularExpression Id. */
  int ACTION = 10;
  /** RegularExpression Id. */
  int METRICURI = 11;
  /** RegularExpression Id. */
  int FINALLY = 12;
  /** RegularExpression Id. */
  int AGENT = 13;
  /** RegularExpression Id. */
  int ESTIMATE = 14;
  /** RegularExpression Id. */
  int AUTHOR = 15;
  /** RegularExpression Id. */
  int PACKAGE = 16;
  /** RegularExpression Id. */
  int TYPEOF = 17;
  /** RegularExpression Id. */
  int ISURI = 18;
  /** RegularExpression Id. */
  int ISBLANK = 19;
  /** RegularExpression Id. */
  int ISLITERAL = 20;
  /** RegularExpression Id. */
  int CUSTOM = 21;
  /** RegularExpression Id. */
  int VARIABLE = 22;
  /** RegularExpression Id. */
  int FUNCTION = 23;
  /** RegularExpression Id. */
  int COUNT = 24;
  /** RegularExpression Id. */
  int COUNTUNIQUE = 25;
  /** RegularExpression Id. */
  int NORMALISE = 26;
  /** RegularExpression Id. */
  int ADD = 27;
  /** RegularExpression Id. */
  int RATIO = 28;
  /** RegularExpression Id. */
  int TOTALTRIPLES = 29;
  /** RegularExpression Id. */
  int RULE = 30;
  /** RegularExpression Id. */
  int CHAR = 31;
  /** RegularExpression Id. */
  int NUMBER = 32;
  /** RegularExpression Id. */
  int STRICT_STR = 33;
  /** RegularExpression Id. */
  int BOOLEAN = 34;
  /** RegularExpression Id. */
  int STR = 35;
  /** RegularExpression Id. */
  int QUOTED_STR = 36;
  /** RegularExpression Id. */
  int LBRACE = 37;
  /** RegularExpression Id. */
  int RBRACE = 38;
  /** RegularExpression Id. */
  int LPAREN = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int COMMA = 41;
  /** RegularExpression Id. */
  int COLON = 42;
  /** RegularExpression Id. */
  int SEMI_COLON = 43;
  /** RegularExpression Id. */
  int PERIOD = 44;
  /** RegularExpression Id. */
  int QUOTES = 45;
  /** RegularExpression Id. */
  int BOOLEAN_OPERATOR = 46;
  /** RegularExpression Id. */
  int EQ = 47;
  /** RegularExpression Id. */
  int NEQ = 48;
  /** RegularExpression Id. */
  int LT = 49;
  /** RegularExpression Id. */
  int GT = 50;
  /** RegularExpression Id. */
  int LTE = 51;
  /** RegularExpression Id. */
  int GTE = 52;
  /** RegularExpression Id. */
  int LOGICAL_BINARY_OP = 53;
  /** RegularExpression Id. */
  int LOGICAL_NOT = 54;
  /** RegularExpression Id. */
  int HEADER_INDICATOR = 55;
  /** RegularExpression Id. */
  int ASSIGNMENT_OPERATOR = 56;
  /** RegularExpression Id. */
  int ASSOCIATION_OPERATOR = 57;
  /** RegularExpression Id. */
  int SUBJECT_VAR = 58;
  /** RegularExpression Id. */
  int PREDICATE_VAR = 59;
  /** RegularExpression Id. */
  int OBJECT_VAR = 60;
  /** RegularExpression Id. */
  int IRIref = 61;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"#\"",
    "\"def\"",
    "\"label\"",
    "\"description\"",
    "\"match\"",
    "\"action\"",
    "\"metric\"",
    "\"finally\"",
    "\"agent\"",
    "\"estimate\"",
    "\"author\"",
    "\"package\"",
    "\"typeof\"",
    "\"isURI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"custom\"",
    "\"var\"",
    "\"fun\"",
    "\"count\"",
    "\"countUnique\"",
    "\"normalise\"",
    "\"add\"",
    "\"ratio\"",
    "\"totalTriples\"",
    "\"rule\"",
    "<CHAR>",
    "<NUMBER>",
    "<STRICT_STR>",
    "<BOOLEAN>",
    "<STR>",
    "<QUOTED_STR>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\".\"",
    "\"\\\"\"",
    "<BOOLEAN_OPERATOR>",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "<LOGICAL_BINARY_OP>",
    "\"!\"",
    "\"%%\"",
    "\"=\"",
    "\"=>\"",
    "\"?s\"",
    "\"?p\"",
    "\"?o\"",
    "<IRIref>",
  };

}
